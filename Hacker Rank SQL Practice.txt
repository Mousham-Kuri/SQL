Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT * 
FROM CITY
WHERE COUNTRYCODE="USA" AND POPULATION>=100000 ;


Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

select name from city where countrycode='USA' and population > 120000;


Query all columns (attributes) for every row in the CITY table.

SELECT *
FROM city;


Query all columns for a city in CITY with the ID 1661.

SELECT *
FROM city 
WHERE id=1661;


Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT name
FROM city
WHERE countrycode='JPN';



Query a list of CITY and STATE from the STATION table.

SELECT city, state
FROM station;



Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT DISTINCT city
FROM station
WHERE MOD(ID,2)=0;



Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

SELECT count(city) - count(DISTINCT city)
FROM station;



Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

select CITY, length(CITY) from STATION group by city order by length(CITY), city ASC limit 1;

select CITY, length(CITY) from STATION group by city order by length(CITY) desc, city limit 1;



Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
Input Format

select distinct CITY from STATION where CITY RLIKE '^[AEIOU]'



Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT(city)
FROM station
WHERE city REGEXP '[a,e,i,o,u]$'



Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

select distinct CITY from STATION where CITY RLIKE '^[AEIOU]' and CITY RLIKE '[AEIOU]$'



Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct city
from station 
where city REGEXP '^[^A,E,I,O,U]'




Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct city 
from station 
where city REGEXP '[^a,e,i,o,u]$';



Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

select distinct city
from station
where city REGEXP '^[^a,e,i,o,u]' or city REGEXP '[^a,e,i,o,u]$'




Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct city 
from station 
where city REGEXP '^[^a,e,i,o,u]' and city REGEXP'[^a,e,i,o,u]$'



Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

select name 
from students
where marks>75 
order by substr(name,-3,3),ID ASC;


Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select name 
from employee
order by name



Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

select name
from employee
where salary>2000  and months<10
order by employee_id



Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT CASE
    WHEN 2 * GREATEST(A, B, C) >= (A + B + C) THEN "Not A Triangle"
    WHEN A = B AND A = C                      THEN "Equilateral"
    WHEN A = B OR A = C OR B = C              THEN "Isosceles"
                                              ELSE "Scalene"
    END
FROM TRIANGLES





Generate the following two result sets:
Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
Note: There will be at least two entries in the table for each type of occupation.

select concat(name,concat( "(",concat(Left(occupation,1),")")))
from occupations 
order by name;
select concat("There are a total of ", concat(count(occupation),concat(" ",concat(lower(occupation),"s."))))
from occupations
group by occupation
order by count(occupation), occupation ASC;




Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.
Note: Print NULL when there are no more names corresponding to an occupation.

set @r:=0, @s:=0, @t=0, @u:=0;
select min(Doctor),min(Professor),min(Singer),min(Actor)
from (select case
when occupation="Doctor" then(@r:=@r+1)
when occupation="Professor" then(@s:=@s+1)
when occupation="Singer" then(@t:=@t+1)
when occupation="Actor" then(@u:=@u+1) end as rownumber,
case when occupation="Doctor" then Name end as doctor,
case when occupation="Professor" then Name end as professor,
case when occupation="Singer" then Name end as singer,
case when occupation="Actor" then Name end as actor
from occupations
order by name) temp
group by rownumber;







You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
Sample Input
Sample Output
1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf

SELECT CASE 
    WHEN P is null THEN CONCAT(N, " Root")
    WHEN N in (SELECT DISTINCT P FROM BST) THEN CONCAT(N, " Inner")
    ELSE CONCAT(N, " Leaf")
    END
FROM BST
ORDER BY N ASC;







Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: 
Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
Note:
The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.
Input Format
The following tables contain company data:
Company: The company_code is the code of the company and founder is the founder of the company. 
Lead_Manager: The lead_manager_code is the code of the lead manager, and the company_code is the code of the working company. 
Senior_Manager: The senior_manager_code is the code of the senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
Manager: The manager_code is the code of the manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
Employee: The employee_code is the code of the employee, the manager_code is the code of its manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
Sample Input
Company Table:  Lead_Manager Table:  Senior_Manager Table:  Manager Table:  Employee Table: 

select co.company_code, co.founder, count(distinct lm.lead_manager_code), count(distinct sm.senior_manager_code), count(distinct m.manager_code), count(distinct e.employee_code)
from company co
inner join Lead_Manager lm
on co.company_code=lm.company_code
inner join senior_manager sm
on co.company_code=sm.company_code
inner join manager m
on co.company_code=m.company_code
inner join employee e
on co.company_code=e.company_code
group by co.company_code, co.founder
order by co.company_code asc




Query a count of the number of cities in CITY having a Population larger than .

select count(name)
from city 
where population>100000




Query the total population of all cities in CITY where District is California.

select sum(population)
from city
where district="California"





Query the average population of all cities in CITY where District is California.

select avg(population)
from city 
where district="California"





Query the average population of all cities in CITY where District is California.

select avg(population)
from city 
where district="California"




Query the average population for all cities in CITY, rounded down to the nearest integer.

select round(avg(population))
from city




Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

select sum(population)
from city 
where countrycode="JPN"




Query the difference between the maximum and minimum populations in CITY.

select max(population) - min(population)
from city



Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.
Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
Input Format
The EMPLOYEES table is described as follows:
Note: Salary is per month.
Constraints
Sample Input

SELECT CEIL((AVG(salary)) - (AVG(REPLACE(salary, '0', '')))) AS avg_salary FROM employees;







We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.
Input Format
The Employee table containing employee data for a company is described as follows:
where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is the their monthly salary.

select max(salary * months) ,count(*) 
from employee 
group by (salary * months)
order by (salary * months) desc limit 1 ;






Query the following two values from the STATION table:
The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.

select round(sum(lat_n),2), round(sum(long_w),2)
from station





Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.

select round(sum(lat_n),4)
from station
where lat_n>38.7880 and lat_n<137.2345




Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.

select round(sum(lat_n),4)
from station
where lat_n>38.7880 and lat_n<137.2345





Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.

select round(max(lat_n),4)
from station
where lat_n<137.2345





Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.

select round(long_w,4)
from station
where lat_n<137.2345
order by lat_n desc limit 1





Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.

select round(min(lat_n),4)
from station 
where lat_n>38.7780






Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places.

select round(long_w,4)
from station
where lat_n=(select min(lat_n)from station where lat_n>38.7780)





Consider  and  to be two points on a 2D plane.
 happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.

select (round(max(long_w),4) - round(min(long_w),4)) + (round(max(lat_n),4) - round(min(lat_n),4))
from station







Consider  and  to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.
Input Format

select round(sqrt(power((max(lat_n) - min(lat_n)),2) + power((max(long_w) - min(long_w)),2)),4)
from station






A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.
Input Format

set @rowindex := -1; /* 1) creates an index*/ 
/* 3) the outer query will select the average of the 2(for odd no. of values)/1(for even) values we found in the middle of the sorted array */
select round(avg(lat_n),4)
from
/* 2) the index will increment for each new value of lat_n it finds, and sort them by lat_n
*/
(select @rowindex:=@rowindex+1 as rowindex, lat_n 
from station
order by lat_n) as l 
where l.rowindex in (floor(@rowindex/2), ceil(@rowindex/2));





Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

select sum(ct.population)
from city ct
inner join country co
on ct.countrycode=co.code
where continent="Asia"




Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

select ct.name
from city ct
inner join country co
on ct.countrycode=co.code
where continent="Africa" 
group by ct.name





Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

select co.continent, floor(avg(ct.population))
from city ct
inner join country co
on co.code=ct.countrycode
group by co.continent






You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
Grades contains the following data:
Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
Write a query to help Eve.

select
if(grade<8, NULL,Name),Grade, Marks
from students join grades
where marks between Min_Mark and Max_Mark
order by grade desc, name;





P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):

* * * * * 
* * * * 
* * * 
* * 
*
Write a query to print the pattern P(20).

set @number = 21;
select repeat('* ', @number := @number - 1) 
from information_schema.tables;






P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):

* 
* * 
* * * 
* * * * 
* * * * *
Write a query to print the pattern P(20).

set @number = 0;
select repeat('* ', @number := @number + 1) from information_schema.tables where @number<20;